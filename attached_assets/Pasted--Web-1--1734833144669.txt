動物病院向けの請求書発行システムを開発するためのWebアプリケーションを設計・実装してください。以下の要件を満たすようにしてください。

#### 機能要件

1. **ユーザー認証**
   - **ログイン画面**
     - トップ画面としてログイン画面を作成。
     - ユーザーごとにアカウントを管理。
     - ユーザー登録、ログイン、ログアウト機能を実装。
     - パスワードのハッシュ化とセキュリティ対策を行う。

2. **メニュー画面**
   - ログイン後に遷移するメニュー画面を作成。
   - 以下の選択肢を表示するボタンを配置：
     - 診察情報登録
     - 請求書発行
     - マスタ登録
   - 各ボタンを押すと、対応する画面に遷移するようにする。

3. **診察情報登録**
   - **新規登録画面**
     - 新規の診察情報を登録するためのフォームを作成。
     - 以下の項目を入力できるようにする：
       - 飼い主名（マスタDBから選択）
       - ペット名（マスタDBから選択）
       - 病名（マスタDBから選択）
       - 薬名（マスタDBから選択）
       - 診察日
       - その他必要な診療情報
     - 入力内容を保存する機能を実装。
   - **既存情報編集画面**
     - 既存の診察情報を一覧表示。
     - 各診察情報を編集・更新できる機能を提供。

4. **請求書発行**
   - 診察情報を選択した飼い主ごとにグルーピングする機能を実装。
   - メニュー画面から「請求書発行」を選択後、診察情報を確認できる画面を提供。
   - 画面上に「請求書発行」ボタンを配置。
   - ボタンを押すと、指定されたExcel様式に従って請求書を自動生成し、ダウンロード可能にする。

5. **マスタ登録**
   - **飼い主マスタ登録**
     - 飼い主の情報（名前、連絡先など）を登録・編集する画面を作成。
   - **ペットマスタ登録**
     - ペットの情報（名前、種類、年齢など）を登録・編集する画面を作成。
   - **病名マスタ登録**
     - 病名を登録・編集する画面を作成。
   - **薬名マスタ登録**
     - 薬名を登録・編集する画面を作成。
   - 各マスタデータは一覧表示し、追加・編集・削除が可能な機能を提供。

#### 技術要件

- **フロントエンド**
  - モダンなJavaScriptフレームワーク（例：React, Vue.js, または Angular）を使用。
  - レスポンシブデザインを採用し、デスクトップおよびモバイルデバイスでの使用に対応。
  - ルーティングを実装し、ログイン画面からメニュー画面、各機能画面への遷移をスムーズに行う。

- **バックエンド**
  - サーバーサイドフレームワーク（例：Node.js + Express, Django, Ruby on Railsなど）を使用。
  - RESTful APIを設計し、フロントエンドと連携。
  - 各機能に対応するエンドポイントを設計（例：/api/login, /api/diagnosis, /api/invoices, /api/mastersなど）。

- **データベース**
  - リレーショナルデータベース（例：MySQL, PostgreSQL）を使用。
  - 以下のテーブルを設計：
    - ユーザー（ユーザー認証用）
    - 飼い主
    - ペット
    - 病名
    - 薬名
    - 診察情報
    - 請求書

- **認証・セキュリティ**
  - JWT認証またはセッション管理を実装。
  - データのバリデーションとサニタイズを徹底。
  - HTTPSを使用してデータの暗号化を行う。

- **請求書のExcel出力**
  - 指定されたExcel様式に従って請求書を生成。
  - 使用ライブラリ例：SheetJS、ExcelJS。
  - 自動フォーマットやスタイル設定を行い、見やすい請求書を作成。

- **その他**
  - コードはモジュール化し、保守性を高める。
  - バージョン管理（例：Git）を使用し、コードの履歴を管理。

#### UI/UX要件

- シンプルで直感的なユーザーインターフェースを設計。
- 各画面で必要な情報がすぐに入力・参照できるようにする。
- ボタンやフォームの配置をわかりやすくし、操作しやすいデザインにする。
- エラーメッセージや成功メッセージを適切に表示。
- 一貫性のあるデザイン（カラー、フォント、レイアウト）を維持。

#### その他の要件

- **ドキュメント**
  - セットアップ手順や使用方法を詳細に記載したドキュメントを作成。
  - API仕様書、データベース設計書、ユーザーマニュアルを含む。
  
- **コード品質**
  - クリーンで読みやすいコードを記述。
  - 適切なコメントを挿入し、コードの理解を容易にする。
  
- **テスト**
  - ユニットテストや統合テストを追加し、主要な機能の動作を保証。
  - テストカバレッジを高め、バグの早期発見を促進。

以上の要件を満たすWebアプリケーションの設計図、コード、及び必要なドキュメントを提供してください。